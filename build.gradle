
import java.awt.Desktop

apply plugin: 'java'
apply plugin: 'application'

//The true build directory
def staticBuildDir = "C:/Users/Melaia/Documents/NetBeansProjects/Series-Freak/build/libs"
//The built jar file inside the build directory
def jarFile = "$staticBuildDir/Series-Freak.jar" // @jar-file@
//Where to create the exe
def outputFile = "$staticBuildDir/Series-Freak.exe" // @output-file@
//The true project directory
def staticProjectDir = "C:/Users/Melaia/Documents/NetBeansProjects/Series-Freak"
//The location to the icon file
def icon = "$staticProjectDir/icon.ico" // @icon-file@

//Minimum jre version
def minJre = "1.8.0_65" // @min-jre@
//Initial heap size
def initialHeap = "256" // @initial-heap@
//Max heap size
def maxHeap = "512" // @max-heap@

//Exe file version
def fileVersion = "1.0.0.0" // @file-version@
//Exe textual file version
def txtVersion = "1.0" // @txt-version@
//Exe product version
def productVersion = "1.0.0.0" // @product-version@
//Exe textual product version
def txtProductVersion = "1.0" // @txt-product-version@

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//We need this argument because of a bug in javafx
//where menu bars and similar components lag
//after a window resize.
applicationDefaultJvmArgs = ["-Dprism.vsync=false"]
mainClassName = 'net.lm.seriesfreak.Main'

if (!project.hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

//Copies the required library files into
//the libs folder.
task copyDependencies(type: Copy){
    into "$buildDir/libs/libs"
    from configurations.runtime
}

//Copies the licneses for the libraries
task copyLibraryLicenses(type: Copy){
    into "$buildDir/libs/legal"
    from "$projectDir/licenses"
    exclude 'LICENSE'
    exclude 'LICENSE.txt'
}

//Copies the licenses for the project
task copyProjectLicenses(type: Copy){
    into "$buildDir/libs"
    from "$projectDir/licenses/LICENSE.txt"
}

//Creates an exe with launch4j
task createExe(){
    String contents = new File("$projectDir/scripts/Launch4j-Series-Freak.xml").getText('UTF-8')
    
    contents = contents.replaceAll("@jar-file@", jarFile)
    contents = contents.replaceAll("@output-file@", outputFile)
    contents = contents.replaceAll("@icon-file@", icon)
    
    contents = contents.replaceAll("@min-jre@", minJre)
    contents = contents.replaceAll("@initial-heap@", initialHeap)
    contents = contents.replaceAll("@max-heap@", maxHeap)
    
    contents = contents.replaceAll("@file-version@", fileVersion)
    contents = contents.replaceAll("@txt-version@", txtVersion)
    contents = contents.replaceAll("@product-version@", productVersion)
    contents = contents.replaceAll("@txt-product-version@", txtProductVersion)
    
    new File("$buildDir/libs/Launch4j.xml").write(contents, 'UTF-8')
    
    String contents1 = new File("$projectDir/scripts/launch4j.bat").getText('UTF-8')
    
    contents1 = contents1.replaceAll("@script@", "\"$staticBuildDir/Launch4j.xml\"")
    
    new File("$buildDir/libs/Launch4j.bat").write(contents1, 'UTF-8')
    
    java.awt.Desktop.desktop.open(new File("$buildDir/libs/Launch4j.bat"))
}

createExe.dependsOn(build)
build.dependsOn(copyDependencies)
build.dependsOn(copyLibraryLicenses)
build.dependsOn(copyProjectLicenses)

repositories {
    mavenCentral()
}

dependencies {
    //Logging framworks
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    //Google Guava
    compile 'com.google.guava:guava:19.0'
    //Google Gson
    compile 'com.google.code.gson:gson:2.6.2'
    
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect { "libs/" + it.getName() }.join(' '), 
            'Main-Class': 'net.lm.seriesfreak.Main'
        )
    }
}
