/*
 * Copyright (C) 2015 Luke Melaia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.awt.Desktop

apply plugin: 'java'
apply plugin: 'application'

//The true build directory
def staticBuildDir = "C:/Users/Melaia/Documents/NetBeansProjects/Series-Freak/build/libs" // @build-dir@
//The built jar file inside the build directory
def jarFile = "$staticBuildDir/Series-Freak.jar" // @jar-file@
//Where to create the exe
def outputFile = "$staticBuildDir/Series-Freak.exe" // @output-file@
//The true project directory
def staticProjectDir = "C:/Users/Melaia/Documents/NetBeansProjects/Series-Freak" // @project-dir@
//The location to the icon file
def icon = "$staticProjectDir/icon.ico" // @icon-file@

//Minimum jre version
def minJre = "1.8.0_65" // @min-jre@
//Initial heap size
def initialHeap = "256" // @initial-heap@
//Max heap size
def maxHeap = "512" // @max-heap@

//Exe file version
def fileVersion = "1.0.0.0" // @file-version@
//Exe textual file version
def txtVersion = "1.0" // @txt-version@
//Exe product version
def productVersion = "1.0.0.0" // @product-version@
//Exe textual product version
def txtProductVersion = "1.0" // @txt-product-version@

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//We need this argument because of a bug in javafx
//where menu bars and similar components lag
//after a window resize.
applicationDefaultJvmArgs = ["-Dprism.vsync=false"]
mainClassName = 'net.lm.seriesfreak.Main'

if (!project.hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

/*
 * This was painful to write, but it was worth it. 
 */

//Copies the required library files into
//the libs folder.
task copyDependencies(type: Copy){
    into "$buildDir/libs/libs"
    from configurations.runtime
}

//Copies the licneses for the libraries
task copyLibraryLicenses(type: Copy){
    into "$buildDir/libs/legal"
    from "$projectDir/licenses"
    exclude 'LICENSE'
    exclude 'LICENSE.txt'
}

//Copies the licenses for the project
task copyProjectLicenses(type: Copy){
    into "$buildDir/libs"
    from "$projectDir/licenses/LICENSE.txt"
}

//Creates an exe file with launch4j.
task createExe(){
    doFirst{
        //First copy the xml file that tells Launch4j
        //What to do and edit its contents. 
        String contents = new File("$projectDir/scripts/Launch4j-Series-Freak.xml").getText('UTF-8')
        contents = contents.replaceAll("@jar-file@", jarFile)
        contents = contents.replaceAll("@output-file@", outputFile)
        contents = contents.replaceAll("@icon-file@", icon)
    
        contents = contents.replaceAll("@min-jre@", minJre)
        contents = contents.replaceAll("@initial-heap@", initialHeap)
        contents = contents.replaceAll("@max-heap@", maxHeap)
    
        contents = contents.replaceAll("@file-version@", fileVersion)
        contents = contents.replaceAll("@txt-version@", txtVersion)
        contents = contents.replaceAll("@product-version@", productVersion)
        contents = contents.replaceAll("@txt-product-version@", txtProductVersion)
        new File("$buildDir/libs/Launch4j.xml").write(contents, 'UTF-8')
    
        //Next we copy over the .bat file to run Launch4j.
        String contents1 = new File("$projectDir/scripts/launch4j.bat").getText('UTF-8')
        contents1 = contents1.replaceAll("@script@", "\"$staticBuildDir/Launch4j.xml\"")
        new File("$buildDir/libs/Launch4j.bat").write(contents1, 'UTF-8')
        
        //Run the command after we copy it.
        java.awt.Desktop.desktop.open(new File("$buildDir/libs/Launch4j.bat"))
    }
    doLast{
        //Finally we delete the scripts to make the work space cleaner.
        Thread.sleep(2000)//Give launch4j some time to run
        new File("$buildDir/libs/Launch4j.bat").delete()
        new File("$buildDir/libs/Launch4j.xml").delete()
    }
}

//Creates an installer with IzPack
task createInstaller(){
    doFirst(){
        //Copy over the shortcut files first.
        new File("$buildDir/libs/IzPack_shortcutSpec.xml").write(
            new File("$projectDir/scripts/IzPack_shortcutSpec.xml").getText("UTF-8"), "UTF-8"
        )
        
        new File("$buildDir/libs/IzPack_UNIX_shortcutSpec.xml").write(
            new File("$projectDir/scripts/IzPack_UNIX_shortcutSpec.xml").getText("UTF-8"), "UTF-8"
        )
        
        //Copy over and edit the config file.
        String izpack = new File("$projectDir/scripts/IzPack.xml").getText('UTF-8')
        izpack = izpack.replaceAll("@txt-version@", txtVersion)
        izpack = izpack.replaceAll("@project-dir@", staticProjectDir)
        izpack = izpack.replaceAll("@build-dir@", staticBuildDir)
        new File("$buildDir/libs/IzPack.xml").write(izpack, 'UTF-8')
        
        //Copy the runnable bat file.
        String bat = new File("$projectDir/scripts/izPack.bat").getText('UTF-8')
        bat = bat.replaceAll("@script@", "\"$staticBuildDir/IzPack.xml\"")
        new File("$buildDir/libs/izPack.bat").write(bat, 'UTF-8')
        
        //Finally, we run the scripts.
        java.awt.Desktop.desktop.open(new File("$buildDir/libs/izPack.bat"))
    }
    doLast{
        Thread.sleep(15000)//Give IzPack some time to work
        
        //Delete the script files.
        new File("$buildDir/libs/IzPack_shortcutSpec.xml").delete()
        new File("$buildDir/libs/IzPack_UNIX_shortcutSpec.xml").delete()
        new File("$buildDir/libs/IzPack.xml").delete()
        new File("$buildDir/libs/izPack.bat").delete()
    }
}

//Creates an exe from the IzPack installer.
task createExeInstaller(){
    doFirst(){
        //Copy over and replace the launch4j IzPack config file.
        String izpack = new File("$projectDir/scripts/Launch4j-IzPack.xml").getText('UTF-8')
        izpack = izpack.replaceAll("@jar-file@", "$staticBuildDir/IzPack.jar")
        izpack = izpack.replaceAll("@output-file@", "$staticBuildDir/Series Freak Installer.exe")
        izpack = izpack.replaceAll("@icon-file@", icon)
    
        izpack = izpack.replaceAll("@min-jre@", minJre)
    
        izpack = izpack.replaceAll("@file-version@", fileVersion)
        izpack = izpack.replaceAll("@txt-version@", txtVersion)
        izpack = izpack.replaceAll("@product-version@", productVersion)
        izpack = izpack.replaceAll("@txt-product-version@", txtProductVersion)
        new File("$buildDir/libs/Launch4j-IzPack.xml").write(izpack, 'UTF-8')
        
        //Copy over the bat file.
        String contents1 = new File("$projectDir/scripts/launch4j.bat").getText('UTF-8')
        contents1 = contents1.replaceAll("@script@", "\"$staticBuildDir/Launch4j-IzPack.xml\"")
        new File("$buildDir/libs/Launch4j.bat").write(contents1, 'UTF-8')
        
        Thread.sleep(5000)//Give a bit of resting time
        
        //Run the scripts.
        java.awt.Desktop.desktop.open(new File("$buildDir/libs/launch4j.bat"))
    }
    doLast{
        Thread.sleep(2000)
        
        new File("$buildDir/libs/Launch4j-IzPack.xml").delete()
        new File("$buildDir/libs/Launch4j.bat").delete()
    }
}

//Build the whole project with installers.
task buildAll(type: Copy){
    doFirst{
    }
}

buildAll.dependsOn(createExeInstaller)
createExeInstaller.dependsOn(createInstaller)
createInstaller.dependsOn(createExe)
createExe.dependsOn(build)
build.dependsOn(copyDependencies)
build.dependsOn(copyLibraryLicenses)
build.dependsOn(copyProjectLicenses)

repositories {
    mavenCentral()
}

dependencies {
    //Logging framworks
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    //Google Guava
    compile 'com.google.guava:guava:19.0'
    //Google Gson
    compile 'com.google.code.gson:gson:2.6.2'
    //ControlsFX
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.10'
    
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect { "libs/" + it.getName() }.join(' '), 
            'Main-Class': 'net.lm.seriesfreak.Main'
        )
    }
}
